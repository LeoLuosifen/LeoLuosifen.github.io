[{"content":" React 初识react React 是一个由 Facebook（现为 Meta）开发的 JavaScript 库，用于构建用户界面（User Interfaces，简称 UI），特别是构建单页应用（SPA）中的前端界面。\n🌟 核心特点 组件化： React 把 UI 拆分成一个个独立的、可复用的“组件”（Component）。 每个组件负责页面的一部分功能，方便维护和组合。 声明式编程： 你只需要声明“界面长什么样”，React 会负责在数据变化时自动更新界面。 这样写起来更直观，代码也更容易理解和调试。 虚拟 DOM（Virtual DOM）： React 并不是直接操作浏览器的 DOM，而是维护一份“虚拟”的 DOM 副本。 当状态变化时，React 会通过“diff 算法”计算最小更新量，提高性能。 单向数据流（One-way Data Flow）： 数据从父组件传给子组件，数据流动方向清晰，有利于维护大型应用。 支持 Hooks（React 16.8 以后）： 通过 useState、useEffect 等 Hook，让函数组件也能使用状态、生命周期等高级功能。 🧱 基本示例 1 2 3 4 5 6 7 8 9 10 11 12 import React, { useState } from \u0026#39;react\u0026#39;; function Counter() { const [count, setCount] = useState(0); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;当前计数：{count}\u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; setCount(count + 1)}\u0026gt;增加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } 📦 React 不是框架 React 只是“视图层”的库（Library），而不像 Vue 或 Angular 是一个完整框架。\n通常你还会配合其他库一起使用，比如： React Router（路由跳转） Redux / Zustand / Jotai（状态管理） Next.js（构建 React 应用的框架） 如何构建React应用 安装Node.js Node.js 提供两个版本：\nLTS（长期支持版）：稳定、安全，推荐用于生产项目。 Current（最新版）：包含最新特性，但可能不太稳定，适合尝鲜。 🔗 官网地址：https://nodejs.org/\nWindows 安装 打开官网：https://nodejs.org 点击绿色按钮下载 LTS Installer（.msi） 双击安装文件，一路点击 “Next” → 勾选 “Add to PATH” → “Install” 安装完成后打开命令行（CMD），输入以下命令检查是否安装成功： 1 2 node -v # 查看 Node 版本 npm -v # 查看 npm（包管理器）版本 MacOS 安装 方法一：官网下载安装包（推荐新手） 访问 https://nodejs.org 下载 .pkg 文件（LTS） 双击安装即可 方法二：使用 Homebrew（推荐给开发者） 1 brew install node Linux 安装（以 Ubuntu 为例） 1 2 3 4 5 6 7 8 9 # 更新仓库 sudo apt update # 安装 Node.js（LTS） sudo apt install nodejs npm # 检查版本 node -v npm -v 更推荐使用 nvm 安装 Node（见下方高级方法）\nnvm（Node Version Manager）允许你安装、切换多个 Node.js 版本，非常适合开发者使用。\n安装 nvm（适用于 macOS 和 Linux）： 1 curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash 安装后重新打开终端，输入：\n1 2 3 nvm install --lts # 安装 LTS 版本 nvm use --lts # 使用 LTS 版本 nvm list # 查看已安装版本 验证安装是否成功 1 2 node -v # 例如 v18.19.1 npm -v # 例如 10.2.0 方式1：使用Vite 1 2 3 4 npm create vite@latest my-app -- --template react cd my-app npm install npm run dev 方式2：使用Next.js 1 2 3 npx create-next-app@latest my-app cd my-app npm run dev 组件的导出和导入 创建一个新的文件来存放组件的代码（React组件是常规的JavaScript函数，但是组件的名称必须以大写字母开头，否则它们将无法运行！） 导出该文件中的函数组件 在需要使用该组件的文件中导入，以下为示例： 1 2 3 4 5 6 /* 定义Helloworld组件并导出 */ function Helloworld() { /* ... */ } export default Helloworld; 1 2 3 4 5 6 7 8 /* 引入Helloworld组件并使用 */ import Helloworld from \u0026#39;./Helloworld.jsx\u0026#39; export default function App() { return ( \u0026lt;Helloworld /\u0026gt; ); } 语法 导出语句 导入语句 默认 export default function Hello() {} import Hello from \u0026lsquo;./Hello.js\u0026rsquo;; 具名 export function Hello() {} import { Hello } from \u0026lsquo;./Hello.js\u0026rsquo;; JSX书写标签语言 在 React 中，JSX（JavaScript XML） 是一种 JavaScript 的语法扩展，它允许你在 JavaScript 代码中写类似 HTML 的结构。虽然浏览器不能直接理解 JSX，但在构建过程中，JSX 会被编译成标准的 JavaScript 函数调用（通常是 React.createElement 调用）。\n简单示例：\n1 const element = \u0026lt;h1\u0026gt;Hello, world!\u0026lt;/h1\u0026gt;; 上面这行代码看起来像HTML，但其实是JSX语法，它在编译后会被转换成下面的样子：\n1 const element = React.createElement(\u0026#39;h1\u0026#39;, null, \u0026#39;Hello, world!\u0026#39;); 每个 React 组件都是一个 JavaScript 函数，它会返回一些标签，React 会将这些标签渲染到浏览器上。React 组件使用一种被称为 JSX 的语法扩展来描述这些标签。JSX 看起来和 HTML 很像，但它的语法更加严格并且可以动态展示信息。了解这些区别最好的方式就是将一些 HTML 标签转化为 JSX 标签。\n🚧注意\nJSX 和 React 是相互独立的东西。但它们经常一起使用，但可以单独使用它们中的任意一个，JSX是一种语法扩展，而React则是一个JavaScript库。\nJSX规则说明 1、只能返回一个根元素 如果想要在一个组件中包含多个元素，需要用一个父标签把它们包裹起来。\n例如，你可以使用一个 \u0026lt;div\u0026gt; 标签：\n1 2 3 4 5 6 \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;今日待办事项\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; 如果你不想在标签中增加一个额外的 \u0026lt;div\u0026gt;，可以用 \u0026lt;\u0026gt; 和 \u0026lt;/\u0026gt; 元素来代替：\n1 2 3 4 5 6 \u0026lt;\u0026gt; \u0026lt;h1\u0026gt;今日待办事项\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; ... \u0026lt;/ul\u0026gt; \u0026lt;/\u0026gt; 这个空标签被称作 Fragment。React Fragment 允许你将子元素分组，而不会在 HTML 结构中添加额外节点。\n2、标签必须闭合 JSX 要求标签必须正确闭合。像 \u0026lt;img\u0026gt; 这样的自闭合标签必须书写成 \u0026lt;img /\u0026gt;，而像 \u0026lt;li\u0026gt;oranges 这样只有开始标签的元素必须带有闭合标签，需要改为 \u0026lt;li\u0026gt;oranges\u0026lt;/li\u0026gt;。\n3、驼峰命名，类似于JavaScript JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，class要写成className，for要写成htmlFor。\nJSX通过大括号使用JavaScript JSX 允许你在 JavaScript 中编写类似 HTML 的标签，从而使渲染的逻辑和内容可以写在一起。有时候，你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。\n1 2 3 4 5 6 7 8 9 10 function todoList() { const name = \u0026#39;Leo\u0026#39;; return( \u0026lt;h1\u0026gt;{name}的代办事项\u0026lt;/h1\u0026gt; ) } export default todoList; /* Leo 的待办事项 */ 使用场景\n用作 JSX 标签内的文本：\u0026lt;h1\u0026gt;{name}'s To Do List\u0026lt;/h1\u0026gt; 是有效的，但是 \u0026lt;{tag}\u0026gt;Leo's To Do List\u0026lt;/{tag}\u0026gt; 无效。 用作紧跟在 = 符号后的 属性：src={avatar} 会读取 avatar 变量，但是 src=\u0026quot;{avatar}\u0026quot; 只会传一个字符串 {avatar}。 Props传递给组件 在 React 中，props 是组件之间传递数据的机制，全称是 properties（属性）。它允许你把数据从父组件传递到子组件，从而让组件更灵活、可复用。可以通过props传递任何JavaScript值，包括对象，数组和函数。\n向组件传递props 基本用法 - 父组件传递数据 示例：\n1 2 3 4 5 6 7 function Welcome(props) { return \u0026lt;h1\u0026gt;Hello, {props.name}!\u0026lt;/h1\u0026gt;; } function App() { return \u0026lt;Welcome name=\u0026#34;Leo\u0026#34; /\u0026gt;; } 输出结果\n1 Hello, Leo! 传递多个 props 1 2 3 4 5 6 7 8 9 10 11 12 function UserInfo(props) { return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;{props.name}\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;年龄：{props.age}\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } function App() { return \u0026lt;UserInfo name=\u0026#34;Leo\u0026#34; age={18} /\u0026gt;; } 🛠使用解构简化 props 通常你不需要整个 props 对象，所以可以将它解构为单独的 props。\n1 2 3 function UserInfo({name, age}) { return \u0026lt;p\u0026gt;{name} - {age}\u0026lt;/p\u0026gt;; } 📑注意\n在声明props时，不要忘记（和）之间的的一对花括号 { 和 }：\n1 2 3 function UserInfo({name, age}) { // ... } 下面的代码语法被称为“解构”，相当于从函数参数中读取属性：\n1 2 3 4 function UserInfo(props) { let name = props.name; let age = props.age; } 传递函数作为prop 1 2 3 4 5 6 7 8 function Button({ onClick }) { return \u0026lt;button onClick={onClick}\u0026gt;点击我\u0026lt;/button\u0026gt;; } function App() { const handleClick = () =\u0026gt; alert(\u0026#39;按钮被点击了！\u0026#39;); return \u0026lt;Button onClick={handleClick} /\u0026gt;; } React的条件渲染 在 React 中，“条件渲染”指的是根据条件决定是否渲染某个组件或元素，就像 JavaScript 中的条件语句一样。\n选择性地返回null 在一些情况下，你不想有任何东西进行渲染。比如，你不想显示已经打包好的物品。但一个组件必须返回一些东西。这种情况下，你可以直接返回 null。\n1 2 3 4 5 6 function Hello({ name, isFulled }) { if (isFulled) { return null; } return \u0026lt;li className=\u0026#34;item\u0026#34;\u0026gt;Hello - {name}\u0026lt;/li\u0026gt;; } if语句（基础） 1 2 3 4 5 6 7 function Login(props) { const isLoggedIn = props.isLoggedIn; if (isLoggedIn) { return \u0026lt;h1\u0026gt;欢迎回来！\u0026lt;/h1\u0026gt;; } return \u0026lt;h1\u0026gt;请先登录。\u0026lt;/h1\u0026gt;; } 三元表达式（? :）（常用于JSX中） 1 2 3 4 5 6 7 function Login(props) { return ( \u0026lt;h1\u0026gt; {props.isLoggedIn ? \u0026#39;欢迎回来！\u0026#39; : \u0026#39;请先登录。\u0026#39;} \u0026lt;/h1\u0026gt; ); } 如果isLoggedIn为true时，则( ? )渲染'欢迎回来',否则( : )渲染'请先登录'。\n逻辑与\u0026amp;\u0026amp;运算符（适合只在满足时显示） 另一个常见的快捷表达式是JavaScript 逻辑与（\u0026amp;\u0026amp;）运算符。在 React 组件里，通常用在当条件成立时，你想渲染一些 JSX，或者不做任何渲染。\n1 2 3 4 5 6 7 8 function Notification(props) { return ( \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;消息中心\u0026lt;/h1\u0026gt; {props.hasNewMessage \u0026amp;\u0026amp; \u0026lt;p\u0026gt;你有一条新消息！\u0026lt;/p\u0026gt;} \u0026lt;/div\u0026gt; ); } ‼️注意\n切勿将数字放在 \u0026amp;\u0026amp; 左侧.\nJavaScript 会自动将左侧的值转换成布尔类型以判断条件成立与否。然而，如果左侧是 0，整个表达式将变成左侧的值（0），React 此时则会渲染 0 而不是不进行渲染。\n例如，一个常见的错误是 messageCount \u0026amp;\u0026amp; \u0026lt;p\u0026gt;New messages\u0026lt;/p\u0026gt;。其原本是想当 messageCount 为 0 的时候不进行渲染，但实际上却渲染了 0。\n为了更正，可以将左侧的值改成布尔类型：messageCount \u0026gt; 0 \u0026amp;\u0026amp; \u0026lt;p\u0026gt;New messages\u0026lt;/p\u0026gt;。\nswitch多分支（较复杂时推荐，不常用） 1 2 3 4 5 6 7 8 9 10 11 12 function Status(props) { switch (props.status) { case \u0026#39;loading\u0026#39;: return \u0026lt;p\u0026gt;加载中...\u0026lt;/p\u0026gt;; case \u0026#39;success\u0026#39;: return \u0026lt;p\u0026gt;加载成功！\u0026lt;/p\u0026gt;; case \u0026#39;error\u0026#39;: return \u0026lt;p\u0026gt;加载失败。\u0026lt;/p\u0026gt;; default: return null; } } React的列表渲染 在 React 中，渲染列表是指使用 Array.map() 方法动态生成多个组件或元素，通常用于展示一组数据（如任务列表、用户列表、文章等）。\n基本语法：使用.map()渲染 1 2 3 4 5 6 7 8 9 10 11 function App() { const names = [\u0026#39;Alice\u0026#39;, \u0026#39;Bob\u0026#39;, \u0026#39;Charlie\u0026#39;]; return ( \u0026lt;ul\u0026gt; {names.map((name) =\u0026gt; ( \u0026lt;li\u0026gt;{name}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } 👨‍👩‍👦 输出结果：\n1 2 3 - Alice - Bob - Charlie ⁉️ 注意\n浏览器中的console会输出一个警告\n1 Warning: Each child in a list should have a unique “key” prop. 所以我们必须给数组中的每一项都指定一个key，它可以是字符串或者数字的形式，只要能唯一标识出各个数组项就行：\n1 2 3 4 5 \u0026lt;ul\u0026gt; {names.map((name, index) =\u0026gt; ( \u0026lt;li key={index}\u0026gt;{name}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; 📋 注意\n📌 直接放在 map() 方法里的 JSX 元素一般都需要指定 key 值！\n✅ 如果数据有唯一 ID，请优先用 id，不要随便用 index，避免排序或增删时出 bug。\n渲染对象数组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const todos = [ { id: 1, title: \u0026#39;吃饭\u0026#39; }, { id: 2, title: \u0026#39;睡觉\u0026#39; }, { id: 3, title: \u0026#39;写代码\u0026#39; }, ]; function TodoList() { return ( \u0026lt;ul\u0026gt; {todos.map((todo) =\u0026gt; ( \u0026lt;li key={todo.id}\u0026gt;{todo.title}\u0026lt;/li\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } 渲染组件列表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function TodoItem({ title }) { return \u0026lt;li\u0026gt;{title}\u0026lt;/li\u0026gt;; } function TodoList() { const todos = [\u0026#39;学习 React\u0026#39;, \u0026#39;敲代码\u0026#39;, \u0026#39;喝果汁\u0026#39;]; return ( \u0026lt;ul\u0026gt; {todos.map((todo, index) =\u0026gt; ( \u0026lt;TodoItem key={index} title={todo} /\u0026gt; ))} \u0026lt;/ul\u0026gt; ); } 📂 小技巧：\n可在.map()中组合条件渲染、事件绑定等。 建议将.map()放在JSX内部，也可以先处理好数据再传入。 响应事件 在 React 中，“响应事件”就是为组件绑定事件处理函数（如点击、键盘、表单等），和原生 DOM 事件类似，但语法略有不同。其中事件处理函数为自定义函数，它将在响应交互（如点击、悬停、表单输入框获得焦点等）时触发。\n添加事件处理事件 在ClickButton组件内部声明一个handleClick的函数。 实现函数内部的逻辑（使用alert或者console.log来显示打印消息）。 添加onClick={handleClick}到\u0026lt;button\u0026gt;JSX中。 1 2 3 4 5 6 7 function ClickButton() { function handleClick() { alert(\u0026#39;按钮被点击了！\u0026#39;); } return \u0026lt;button onClick={handleClick}\u0026gt;点击我\u0026lt;/button\u0026gt;; } 或者可以在JSX中定义一个内联的事件处理函数或使用更为简洁的箭头函数：\n1 2 3 \u0026lt;button onClick={function handleClick() { console.log(\u0026#39;你点击了我！\u0026#39;); }}\u0026gt; 1 2 3 \u0026lt;button onClick={() =\u0026gt; { console.log(\u0026#39;你点击了我！\u0026#39;); }}\u0026gt; 传参，在事件处理函数中读取props 由于事件处理函数声明于组件内部，因此它们可以直接访问组件的 props。\n1 2 3 4 5 6 7 function ClickButton() { function handleClick(name) { console.log(`Hello, ${name}`); } return \u0026lt;button onClick={() =\u0026gt; handleClick(\u0026#39;Alice\u0026#39;)}\u0026gt;打招呼\u0026lt;/button\u0026gt;; } ⚠️ 使用箭头函数可以传参，但要注意性能（避免在每次渲染都创建新函数）。\n输入框响应事件（onChange） 1 2 3 4 5 6 7 function InputBox() { function handleChange(event) { console.log(\u0026#39;你输入了：\u0026#39;, event.target.value); } return \u0026lt;input type=\u0026#34;text\u0026#34; onChange={handleChange} /\u0026gt;; } ","date":"2025-07-18T15:35:12+10:00","permalink":"https://LeoLuosifen.github.io/p/learning-react/","title":"Learning React"},{"content":"Windows 系统 1. 下载 MySQL 前往 MySQL 官方下载页面：https://dev.mysql.com/downloads/ 选择 MySQL Community Server。 下载适合你系统的安装程序（一般是 MSI Installer）。 2. 安装 MySQL 启动安装程序： 双击 MSI 文件，启动安装向导。 选择安装类型： 一般选择 Custom，以便自定义安装路径。 默认安装路径通常是：C:\\Program Files\\MySQL\\MySQL Server X.X。 配置服务： 设置 MySQL 服务的端口（默认是 3306）。 选择默认用户身份验证插件（推荐：caching_sha2_password）。 设置 root 用户的密码，并根据需要创建其他用户。 完成安装： 安装完成后，记住配置的路径和 root 密码。 3. 配置环境变量 为了方便使用 MySQL 的命令行工具（如 mysql 和 mysqldump），需要配置环境变量。\n打开环境变量设置： 右键“此电脑”或“我的电脑”，选择“属性”。 点击“高级系统设置” -\u0026gt; “环境变量”。 编辑 Path 变量： 在系统变量中找到 Path，点击“编辑”。 新增 MySQL 安装目录的 bin 路径，例如：C:\\Program Files\\MySQL\\MySQL Server X.X\\bin。 保存并退出。 4. 验证安装 打开命令提示符（Win + R，输入 cmd）。\n输入以下命令检查版本：\n1 mysql --version 登录 MySQL：\n1 mysql -u root -p 输入安装时设置的 root 密码，成功登录后将看到 MySQL 提示符 (mysql\u0026gt; )。\nMac/Linux 系统 1. 使用包管理器安装 Mac： 打开终端，运行以下命令：\n1 brew install mysql Linux： 对于基于 Debian 的系统（如 Ubuntu）：\n1 2 sudo apt update sudo apt install mysql-server 对于基于 Red Hat 的系统（如 CentOS）：\n1 sudo yum install mysql-server 2. 启动 MySQL 服务 Mac/Linux： 启动 MySQL 服务：\n1 sudo service mysql start 检查 MySQL 服务状态：\n1 sudo service mysql status 3. 安全配置 运行 MySQL 安全脚本：\n1 sudo mysql_secure_installation 按提示进行以下配置：\n设置 root 用户密码。 移除匿名用户。 禁止 root 用户远程登录。 移除测试数据库。 4. 登录 MySQL 登录 MySQL：\n1 mysql -u root -p 输入 root 密码后即可进入 MySQL 命令行。\n图形化管理工具 为了更方便地管理 MySQL，可以使用以下工具：\nMySQL Workbench： 官方提供的图形化管理工具。 可从 MySQL Workbench 下载。 第三方工具： phpMyAdmin（基于 Web 的管理工具）。 DBeaver（跨平台数据库管理工具）。 Navicat 常用配置 1. 修改 MySQL 配置文件 MySQL 配置文件的路径可能是：\nWindows：C:\\ProgramData\\MySQL\\MySQL Server X.X\\my.ini Linux/Mac：/etc/mysql/my.cnf 或 /etc/my.cnf 常见设置项 1 2 3 4 5 6 7 8 9 ini复制代码[mysqld] # 设置端口号 port=3306 # 设置默认字符集 character-set-server=utf8mb4 # 设置最大连接数 max_connections=200 2. 重启 MySQL 服务 在修改配置后需要重启 MySQL 服务：\nWindows： 1 2 net stop mysql net start mysql Linux/Mac： 1 sudo service mysql restart 常见问题 MySQL 无法启动或连接失败\n检查 MySQL 服务是否启动：\n1 sudo service mysql status 检查防火墙是否阻止了 3306 端口。\n忘记 root 密码\n参考以下步骤重置密码：\n停止 MySQL 服务：\n1 sudo service mysql stop 以安全模式启动：\n1 sudo mysqld_safe --skip-grant-tables \u0026amp; 登录 MySQL 并重置密码：\n1 2 3 mysql -u root ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;newpassowrd\u0026#39;; FLUSH PRIVILEGES; 字符集问题\n确保 MySQL 使用 utf8mb4 以支持完整的 Unicode 字符。 ","date":"2024-11-29T13:13:02+11:00","permalink":"https://LeoLuosifen.github.io/p/mysql/","title":"MySQL"},{"content":"Windows 系统 1. 下载 Maven 前往 Apache Maven 官方下载页面： https://maven.apache.org/download.cgi 下载二进制 ZIP 包（Binary zip archive），例如：apache-maven-3.x.x-bin.zip。 2. 解压 Maven 将下载的 ZIP 文件解压到一个目录，例如：C:\\Program Files\\Maven。 解压完成后，记住 Maven 的安装路径（如 C:\\Program Files\\Maven\\apache-maven-3.x.x）。 3. 配置环境变量 打开环境变量设置： 右键“此电脑”或“我的电脑”，选择“属性”。 点击“高级系统设置”，然后点击“环境变量”。 设置 MAVEN_HOME 变量： 点击“系统变量”中的“新建”。 变量名：MAVEN_HOME 变量值：Maven 的安装路径，例如 C:\\Program Files\\Maven\\apache-maven-3.x.x 编辑 Path 变量： 找到“系统变量”中的 Path，点击“编辑”。 新增一行，输入 %MAVEN_HOME%\\bin。 保存并退出。 4. 验证安装 打开命令提示符（Win + R，输入 cmd）。\n输入以下命令：\n1 mvn -v 如果输出 Maven 版本和 Java 信息，则安装成功。\n1 2 3 Apache Maven 3.x.x Java version: 1.x.x Java home: C:\\Program Files\\Java\\jdk-xx.x Mac/Linux 系统 1. 使用包管理器安装（推荐） Mac： 打开终端，运行以下命令安装 Maven：\n1 brew install maven Linux： 对于基于 Debian 的系统（如 Ubuntu）：\n1 2 sudo apt update sudo apt install maven 对于基于 Red Hat 的系统（如 CentOS）：\n1 sudo yum install maven 验证安装：\n1 mvn -v 2. 手动下载并安装 下载 Maven： 前往 Apache Maven 官方网站，下载二进制文件。\n解压文件：\n1 2 tar -xvf apache-maven-3.x.x-bin.tar.gz sudo mv apache-maven-3.x.x /opt/maven 配置环境变量：\n打开 ~/.bashrc（或 ~/.zshrc），添加以下内容：\n1 2 export MAVEN_HOME=/opt/maven/apache-maven-3.x.x export PATH=$MAVEN_HOME/bin:$PATH 保存并生效：\n1 source ~/.bashrc 验证安装：\n1 mvn -v 配置 Maven Maven 的默认配置文件位于 conf/settings.xml。以下是一些常见的配置选项：\n1. 设置本地仓库 默认情况下，Maven 的本地仓库位于 ~/.m2/repository。可以在 settings.xml 中更改：\n1 2 3 \u0026lt;settings\u0026gt; \u0026lt;localRepository\u0026gt;C:/maven/repo\u0026lt;/localRepository\u0026gt; \u0026lt;/settings\u0026gt; 2. 配置镜像 为提高依赖下载速度，可以配置国内镜像（例如阿里云）：\n1 2 3 4 5 6 7 8 \u0026lt;mirrors\u0026gt; \u0026lt;mirror\u0026gt; \u0026lt;id\u0026gt;aliyun-maven\u0026lt;/id\u0026gt; \u0026lt;mirrorOf\u0026gt;*\u0026lt;/mirrorOf\u0026gt; \u0026lt;name\u0026gt;aliyun maven\u0026lt;/name\u0026gt; \u0026lt;url\u0026gt;https://maven.aliyun.com/repository/public\u0026lt;/url\u0026gt; \u0026lt;/mirror\u0026gt; \u0026lt;/mirrors\u0026gt; 3. 配置 JDK 版本 在 pom.xml 中指定 Java 版本：\n1 2 3 4 \u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;1.8\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;1.8\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt; ","date":"2024-11-29T12:58:08+11:00","permalink":"https://LeoLuosifen.github.io/p/maven/","title":"Maven"},{"content":"安装 JDK（Java Development Kit）并配置环境变量是学习 Java 编程的第一步。以下是详细步骤，适用于 Windows 和 Mac/Linux 系统：\nWindows 系统 1. 下载 JDK 前往 Oracle 官方网站或 OpenJDK 官网： Oracle JDK：https://www.oracle.com/java/technologies/javase-downloads.html OpenJDK：https://openjdk.org/ 下载适合你的系统（Windows x64）的 JDK 安装包。 2. 安装 JDK 双击下载的安装包，启动安装程序。 按照提示进行安装： 选择安装路径（例如 C:\\Program Files\\Java\\jdk-XX.X.X）。 安装完成后记住安装路径。 3. 配置环境变量 打开环境变量设置： 右键“此电脑”或“我的电脑”，选择“属性”。 点击“高级系统设置”。 在“系统属性”窗口中，选择“高级”选项卡，点击“环境变量”。 设置 JAVA_HOME： 点击“系统变量”下的“新建”按钮。 变量名：JAVA_HOME 变量值：输入 JDK 的安装路径，例如 C:\\Program Files\\Java\\jdk-XX.X.X 配置 PATH 变量： 在“系统变量”中找到 Path，点击“编辑”。 新增一行，输入 %JAVA_HOME%\\bin 配置 CLASSPATH（可选）： 点击“新建”变量。 变量名：CLASSPATH 变量值：.:%JAVA_HOME%\\lib\\tools.jar;%JAVA_HOME%\\lib\\dt.jar （注意：路径分隔符 ;） 4. 验证安装 打开命令提示符（Win + R，输入 cmd）。 输入以下命令： 检查 Java 版本：java -version 检查编译器版本：javac -version 如果显示 JDK 版本信息，说明安装和配置成功。\nMac/Linux 系统 1. 使用包管理器安装 JDK（推荐） Mac： 打开终端，运行以下命令：\n1 brew install openjdk 查看安装路径：\n1 /usr/libexec/java_home Linux： 使用包管理器安装：\nUbuntu/Debian：\n1 2 sudo apt update sudo apt install openjdk-XX-jdk CentOS/RHEL：\n1 sudo yum install java-XX-openjdk-devel 验证安装：\n1 java -version 2. 手动下载与安装 前往 Oracle 或 OpenJDK 网站，下载对应的 JDK 安装包（如 .dmg、.tar.gz）。\n解压（Linux）：\n1 2 tar -xvf jdk-XX.X.X.tar.gz sudo mv jdk-XX.X.X /usr/lib/jvm 3. 配置环境变量 Mac： 打开 ~/.zshrc 或 ~/.bash_profile 文件。\n添加以下内容：\n1 2 export JAVA_HOME=$(/usr/libexec/java_home) export PATH=$JAVA_HOME/bin:$PATH 保存并刷新终端配置：\n1 source ~/.zshrc Linux： 编辑\n1 ~/.bashrc 或\n1 ~/.bash_profile 文件：\n1 2 export JAVA_HOME=/usr/lib/jvm/jdk-XX.X.X export PATH=$JAVA_HOME/bin:$PATH 保存并生效：\n1 source ~/.bashrc 4. 验证安装 运行以下命令：\n1 2 java -version javac -version 如果能正确显示版本信息，说明安装成功。\n","date":"2024-11-28T15:44:35+11:00","permalink":"https://LeoLuosifen.github.io/p/jdk/","title":"JDK"},{"content":"Hello World ","date":"2024-11-28T14:09:37+11:00","permalink":"https://LeoLuosifen.github.io/p/myfirstblog/","title":"MyFirstBlog"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://LeoLuosifen.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://LeoLuosifen.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://LeoLuosifen.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://LeoLuosifen.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://LeoLuosifen.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu_c1ca39d792aee4ab.jpg","permalink":"https://LeoLuosifen.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://LeoLuosifen.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://LeoLuosifen.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://LeoLuosifen.github.io/p/emoji-support/","title":"Emoji Support"}]